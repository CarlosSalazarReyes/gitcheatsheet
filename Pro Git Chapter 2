		//Getting a Git Repository//

	//Initializing a Repository in an Existing Directory//

//For linux:
$ cd /home/user/my_proyect
//For macOS:
$ cd /Users/user/my_proyect
//For windows
$ cd C:/Users/user/my_proyect
//and type:
$ git init
//This creates a new subdirectory named .git
/ start version-controlling existing files, accomplish with a git add, followed by a git commit
$ git add *.c
$ git add LICENSE
$ git commit -m 'Initial project version'

	//Cloning an Existing Repository

//You clone a repository with git clone <url>
$ git clone https://github.com/libgit2/libgit2

	//Recording Changes to the Repository//

//The main tool use to determine which files are in state is git status
$ git status
On branch master
Your branch is up-to-date with 'origin/master'.
nothing to commit, working directory clean
//add a new file to your proyect is a README file.
$ echo 'My Proyect' > README 
$ git status 
On branch master
Your branch is up-to-date with 'origin/master'.
Untracked files:
	(use "git add <file>..." to include in what will be committed)
	README
Nothing added to commit but untracked files present (use "git add" to track)
//use git add, to begin tracking the README file
$ git add README
// use .gitignore. for create a file listing patterns
$ cat .gitignore
*.[oa]
*~
// use git commit
$ git commit
//remove a file from git with git rm
$ rm PROJECTS.md
$git status 
On branch master
Your branch is up-to-date with 'origin/master'.
Changes to be committed:
	(use "git resed HEAD <file>..." to unstage)
	deleted: PROJECTS
//git mv for moving files
$ git mv file_from file_to

	//Undoing Things//

//you cant to redo that commit, make the additional changes you forgot using the --amend option
$ git commit --amend
//If you commit and then realize you forgot to stage the changes in a file you wanted to add to this commit
$ git commit -m 'Initial commit'
$ git add forgotten_file
$ git commit --amend
//How can you unstage one of the two? The git status command reminds you
$ git add *
$ git status
On branch master
Changes to be committed:
  (use "git reset HEAD <file>..." to unstage)

    renamed:    README.md -> README
    modified:   CONTRIBUTING.md

	//Working with Remotes//

//You can run the git remote command, It lists the shortnames of each remote handle you’ve specified
$ git clone https://github.com/schacon/ticgit
Cloning into 'ticgit'...
remote: Reusing existing pack: 1857, done.
remote: Total 1857 (delta 0), reused 0 (delta 0)
Receiving objects: 100% (1857/1857), 374.35 KiB | 268.00 KiB/s, done.
Resolving deltas: 100% (772/772), done.
Checking connectivity... done.
$ cd ticgit
$ git remote
origin
//You can also specify -v, which shows you the URLs that Git has stored 
$ git remote -v
origin	https://github.com/schacon/ticgit (fetch)
origin	https://github.com/schacon/ticgit (push)
//If you want to see more information about a particular remote, you can use the git remote show <remote> command
$ git remote show origin
* remote origin
  Fetch URL: https://github.com/schacon/ticgit
  Push  URL: https://github.com/schacon/ticgit
  HEAD branch: master
  Remote branches:
    master                               tracked
    dev-branch                           tracked
  Local branch configured for 'git pull':
    master merges with remote master
  Local ref configured for 'git push':
    master pushes to master (up to date)
//You can run git remote rename to change a remote’s shortname
$ git remote rename pb paul
$ git remote
origin
paul

	//Tagging//

//listing your tags with git tag
$ git tag
v1.0
v2.0
//creating an annotated tag with tag -a
$git tag -a v1.4 -m "my version 1.4"
$ git tag 
v0.1
v1.3
v1.4

	//Git Aliases//

//you can easily set up an alias for each using git config
$ git config --global alias.co checkout
$ git config --global alias.br branch
$ git config --global alias.ci commit

